import{_ as n,W as a,X as s,a0 as e}from"./framework-668aa7f5.js";const t={},o=e(`<h2 id="method-renamer" tabindex="-1"><a class="header-anchor" href="#method-renamer" aria-hidden="true">#</a> Method Renamer</h2><p>The method renamer seeks to accurately renamer a whole method to prevent the conservation of method names. To achieve this, Skidfuscator creates &quot;method groups&quot; to effectively preserve method hierachy. For example, if <code>class B</code> extends <code>class A</code>, and <code>class A</code> implements <code>methodA()</code>, all calls to <code>methodA()</code> for both <code>class A</code> and <code>class B</code> will need to be renamed.</p><h2 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> Config</h2><p>The method renamer currently supports one dictionary, <code>ALPHABETICAL</code>, alongside the traditional custom dictionary, <code>CUSTOM</code>, based on input. In this scenario, the following options are available:</p><ul><li>Depth: How many literals will be used by default (eg: 3 depth will lead to o0o0o0 for the first item, or 1 depth will lead to o0 for the first item)</li><li>Chars: Characters to be used by the transformer.</li></ul><div class="hint-container warning"><p class="hint-container-title">Note</p><p>As of right now, the transformer does not handle duplicate characters and will improperly create identical method names. For example, do not use &quot;o&quot;, &quot;0&quot; and &quot;o0&quot; as the latter is a combination of the previous two characters.</p></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>methodRenamer <span class="token punctuation">{</span>
    <span class="token literal-property property">enabled</span><span class="token operator">:</span> <span class="token boolean">false</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">CUSTOM</span> <span class="token comment">// or &#39;ALPHABETICAL&#39;</span>
    <span class="token literal-property property">chars</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;K&quot;</span>
        <span class="token string">&quot;oO&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;o0&quot;</span>
    <span class="token punctuation">]</span>
    <span class="token literal-property property">depth</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><h4 id="unobfuscated" tabindex="-1"><a class="header-anchor" href="#unobfuscated" aria-hidden="true">#</a> Unobfuscated</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">callNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*[...]*/</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">callNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="obfuscated" tabindex="-1"><a class="header-anchor" href="#obfuscated" aria-hidden="true">#</a> Obfuscated</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token function">o0k0k0Kk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*[...]*/</span>
<span class="token punctuation">}</span>


<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">o0k0k0Kk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),c=[o];function i(p,l){return a(),s("div",null,c)}const d=n(t,[["render",i],["__file","renamermethod.html.vue"]]);export{d as default};
