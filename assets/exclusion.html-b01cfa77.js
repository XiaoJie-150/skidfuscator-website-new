import{_ as o,W as c,X as p,Y as s,Z as a,$ as t,a0 as n,D as i}from"./framework-668aa7f5.js";const l={},r=n(`<h1 id="writing-exclusions-skidfuscator-2-0-0" tabindex="-1"><a class="header-anchor" href="#writing-exclusions-skidfuscator-2-0-0" aria-hidden="true">#</a> Writing Exclusions (Skidfuscator &gt;= 2.0.0)</h1><p>A regex (regular expression) is a type of search pattern used to identify character strings. It is typically used to search for, replace and validate text. Regexes are written in a formal language and are used in programming, data science and other applications.</p><p>Skidfuscator uses regexes to handle the inclusion and exclusion aspect of it&#39;s configuration.</p><p>Understanding exclusions might be tricky at first, but trust me, it is quite easy once you get the hang of it.</p><p>First and foremost, it&#39;s important to understand basic regex.</p><h2 id="basics-of-regex-regular-expressions" tabindex="-1"><a class="header-anchor" href="#basics-of-regex-regular-expressions" aria-hidden="true">#</a> Basics of Regex (Regular expressions)</h2><ul><li>Here&#39;s a basic string to match everything:</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token punctuation">.</span>*<span class="token operator">?</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>So the following would happen:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>abozeofez <span class="token comment">// Matches!</span>
zeigzoegze <span class="token comment">// Matches!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><ul><li>To match any string which contains &quot;roar&quot;, you&#39;d have</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>roar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>So the following would happen:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>roar <span class="token comment">// Matches!</span>
asdafroar <span class="token comment">// Matches!</span>
grrr <span class="token comment">// No match!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>To match any string which begins <em>with</em> &quot;uwu&quot;, you&#39;d have:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">^</span>uwu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>So the following would happen:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>kitty<span class="token operator">-</span>uwu <span class="token comment">// No match!</span>
uwu<span class="token operator">-</span>kitty <span class="token comment">// Match!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>kitty-uwu</code> would not match because uwu is a suffix in this scenario, and therefore doesn&#39;t begin with the requirement <code>uwu</code>.</li><li><code>uwu-kitty</code> <em>would</em> match in this scenario because the correct prefix specified is present.</li></ul><hr>`,22),u={href:"https://medium.com/factory-mind/regex-tutorial-a-simple-cheatsheet-by-examples-649dc1c3f285",target:"_blank",rel:"noopener noreferrer"},d=n(`<h2 id="writing-exclusions" tabindex="-1"><a class="header-anchor" href="#writing-exclusions" aria-hidden="true">#</a> Writing exclusions</h2><p>This is very simple and easy to do.</p><ul><li>Create a file to write your exclusions in, we recommend using a txt file.</li></ul><p>Skidfuscator reads inclusions and exclusions the same way: if it matches a regex pattern, <strong><strong>it will not be read or obfuscated</strong></strong>.</p><h3 id="exclusions" tabindex="-1"><a class="header-anchor" href="#exclusions" aria-hidden="true">#</a> Exclusions</h3><p>By using regex forward matching as seen below, you are able to match any type of class. Remember to escape any &quot;/&quot; with a &quot;\\&quot; to prevent Regex from comitting seppuku and you spending hours figuring out what&#39;s wrong.</p><p>See below various examples of matching classes &amp; methods for exclusions:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// This will match any method with the name &quot;main&quot;</span>
method<span class="token punctuation">{</span>main<span class="token punctuation">}</span> 
<span class="token comment">// This will match any method which starts with &quot;com.apache&quot; </span>
<span class="token comment">// (any class name replaces the &quot;.&quot; with &quot;/&quot;</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>com\\<span class="token operator">/</span>apache<span class="token punctuation">}</span> 
<span class="token comment">// This will match any method which starts with &quot;com.google&quot; </span>
<span class="token comment">// (any class name replaces the &quot;.&quot; with &quot;/&quot;</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>com\\<span class="token operator">/</span>google<span class="token punctuation">}</span> 
<span class="token comment">// This will match any method in the class &quot;Controller&quot;</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token class-name">Controller</span>$<span class="token punctuation">}</span> 
<span class="token comment">// This will match any method in the class &quot;com.example.MyClass&quot;</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>com\\<span class="token operator">/</span>example\\<span class="token operator">/</span><span class="token class-name">MyClass</span>$<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="multiple-exclusions" tabindex="-1"><a class="header-anchor" href="#multiple-exclusions" aria-hidden="true">#</a> Multiple exclusions</h4><p>To be able to exclude for example several methods, or packages, it&#39;s quite simple really! All you have to do is create a new line and add the new exemption ðŸ˜ƒ</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>com\\<span class="token operator">/</span>apache<span class="token punctuation">}</span> <span class="token comment">// Matches apache</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>com\\<span class="token operator">/</span>google<span class="token punctuation">}</span> <span class="token comment">// Matches google</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inclusions" tabindex="-1"><a class="header-anchor" href="#inclusions" aria-hidden="true">#</a> Inclusions</h3><p>As opposed to exclusions, you may want to <strong>only include a particular set of classes or a package</strong> in your obfuscated jar. Fret not, this is possible, albeit a little more complicated.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// This will match all classes of the package &quot;com.example&quot;</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">(</span>com\\<span class="token operator">/</span>example<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>*$<span class="token punctuation">}</span> 

<span class="token comment">// This will match all classes of the package &quot;com.example&quot; and </span>
<span class="token comment">// all of the classes of the package &quot;com.eclipse&quot;. </span>
<span class="token comment">// You may add as many packages as you wish with the &quot;|&quot; argument.</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">?</span><span class="token operator">!</span><span class="token punctuation">(</span>com\\<span class="token operator">/</span>example<span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span>com\\<span class="token operator">/</span>eclipse<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>*$<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="debugging-exclusions" tabindex="-1"><a class="header-anchor" href="#debugging-exclusions" aria-hidden="true">#</a> Debugging Exclusions</h2>`,15),m={href:"https://regex101.com/",target:"_blank",rel:"noopener noreferrer"},k=n(`<p>All class names, by default, follow the format &quot;package1/package2/class1&quot;. Whilst you may see in the JVM it is formatted differently, in the case of Skidfuscator, the above format was decided to be the most effective and reflective of Jar/Zip file hierarchy.</p><h2 id="exemplar-exclusions-file" tabindex="-1"><a class="header-anchor" href="#exemplar-exclusions-file" aria-hidden="true">#</a> Exemplar Exclusions File</h2><p>A lot of our clients develop Minecraft modifications or plugins, see below a template / exemplar configuration file with the most commonly required exclusions:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Package exclusions below</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>net\\<span class="token operator">/</span>minecraftforge<span class="token punctuation">}</span> <span class="token comment">// Matches Minecraft Forge</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>net\\<span class="token operator">/</span>minecraft\\<span class="token operator">/</span>client<span class="token punctuation">}</span> <span class="token comment">// Matches Minecraft Client</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>net\\<span class="token operator">/</span>minecraft\\<span class="token operator">/</span>server<span class="token punctuation">}</span> <span class="token comment">// Matches Minecraft Server</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>org\\<span class="token operator">/</span>bukkit<span class="token punctuation">}</span> <span class="token comment">// Matches Bukkit</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>com\\<span class="token operator">/</span>mojang<span class="token punctuation">}</span> <span class="token comment">// Matches Mojang</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>me\\<span class="token operator">/</span>johnymuffin<span class="token punctuation">}</span> <span class="token comment">// Matches JohnyMuffin</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>com\\<span class="token operator">/</span>sk89q<span class="token punctuation">}</span> <span class="token comment">// Matches Sk89q</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>org\\<span class="token operator">/</span>spigotmc<span class="token punctuation">}</span> <span class="token comment">// Matches SpigotMC</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>org\\<span class="token operator">/</span>apache\\<span class="token operator">/</span>commons<span class="token punctuation">}</span> <span class="token comment">// Matches Apache Commons</span>
<span class="token keyword">class</span><span class="token punctuation">{</span><span class="token operator">^</span>org\\<span class="token operator">/</span>jline<span class="token punctuation">}</span> <span class="token comment">// Matches JLine</span>

<span class="token comment">// Method exclusions below </span>
method<span class="token punctuation">{</span><span class="token operator">^</span>net\\<span class="token punctuation">.</span>minecraft\\<span class="token punctuation">.</span>client<span class="token punctuation">}</span> <span class="token comment">// Excludes all methods from net.minecraft.client package </span>
method<span class="token punctuation">{</span><span class="token operator">^</span>net\\<span class="token punctuation">.</span>minecraft\\<span class="token punctuation">.</span>util<span class="token punctuation">}</span> <span class="token comment">// Excludes all methods from net.minecraft.util package </span>
method<span class="token punctuation">{</span><span class="token operator">^</span>net\\<span class="token punctuation">.</span>minecraft\\<span class="token punctuation">.</span>client\\<span class="token punctuation">.</span>Minecraft<span class="token punctuation">}</span> <span class="token comment">// Excludes all methods from the Minecraft class</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4);function h(v,g){const e=i("ExternalLinkIcon");return c(),p("div",null,[r,s("p",null,[a("If you'd like to read more about Regex, find out here: "),s("a",u,[a("Regex tutorial"),t(e)])]),d,s("p",null,[a("I strongly recommend using a regex debugger, such as "),s("a",m,[a("Regex101"),t(e)]),a(", to be able to figure out what matches and what does not.")]),k])}const f=o(l,[["render",h],["__file","exclusion.html.vue"]]);export{f as default};
