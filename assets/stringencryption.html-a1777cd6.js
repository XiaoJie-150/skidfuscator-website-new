import{_ as n,W as a,X as s,a0 as t}from"./framework-668aa7f5.js";const e={},p=t(`<h2 id="string-encryption" tabindex="-1"><a class="header-anchor" href="#string-encryption" aria-hidden="true">#</a> String Encryption</h2><p>The string encryption transformer transforms every string into a specific method call, with the purpose of hiding it in runtime. This can be practical for non-sensitive URLs, private keys, etc...</p><div class="hint-container warning"><p class="hint-container-title">Note</p><p>You should not trust the client as a basis. Please do not rely on String encryption as the sole protection for your software. By default, you should assume that a talented enough reverse-engineer could gain access to these with enough time and patience.</p></div><h2 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> Config</h2><p>There are currently two modes for String encryption: <code>STANDARD</code> and <code>POLYMORPHIC</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>stringEncryption <span class="token punctuation">{</span>
    <span class="token literal-property property">enabled</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token constant">POLYMORPHIC</span>
    <span class="token literal-property property">exempt</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><h3 id="unobfuscated" tabindex="-1"><a class="header-anchor" href="#unobfuscated" aria-hidden="true">#</a> Unobfuscated</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="standard" tabindex="-1"><a class="header-anchor" href="#standard" aria-hidden="true">#</a> Standard</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">superDuperMethod</span><span class="token punctuation">(</span><span class="token string">&quot;\\u2be6\\uabec\\uebfe\\uebfe\\uabe0\\uabf7\\ue7f1&quot;</span><span class="token punctuation">,</span> n <span class="token operator">^</span> <span class="token number">0</span>x9F878R<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="polymorphic" tabindex="-1"><a class="header-anchor" href="#polymorphic" aria-hidden="true">#</a> Polymorphic</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">StringBuilder</span> string <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;\\u2be6\\uabec\\uebfe\\uebfe\\uabe0\\uabf7\\ue7f1\\uabe0\\u6bfa\\uebfe\\uabee\\uabf5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span> a <span class="token operator">&lt;</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    b <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0x6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;&gt;</span> <span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span>
    c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&gt;&gt;</span> <span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>b <span class="token operator">&gt;&gt;</span> <span class="token number">0x7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0x4</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b <span class="token operator">^=</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;&lt;</span> <span class="token number">0x0</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;&lt;</span> <span class="token number">0x7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b <span class="token operator">^=</span> <span class="token number">0x600f</span> <span class="token operator">^</span> n<span class="token punctuation">;</span>
    b <span class="token operator">-=</span> <span class="token number">0x2aa2</span> <span class="token operator">^</span> n<span class="token punctuation">;</span>
    b <span class="token operator">+=</span> <span class="token number">0x25b0</span> <span class="token operator">^</span> n<span class="token punctuation">;</span>
    b <span class="token operator">^=</span> <span class="token number">0x9852</span> <span class="token operator">^</span> n<span class="token punctuation">;</span>
    string<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[p];function c(l,i){return a(),s("div",null,o)}const r=n(e,[["render",c],["__file","stringencryption.html.vue"]]);export{r as default};
